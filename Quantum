{
  "nbformat": 4,
  "nbformat_minor": 0,
  "metadata": {
    "colab": {
      "provenance": [],
      "authorship_tag": "ABX9TyNTY/at0gqaU9RoVrj7trkc",
      "include_colab_link": true
    },
    "kernelspec": {
      "name": "python3",
      "display_name": "Python 3"
    },
    "language_info": {
      "name": "python"
    }
  },
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "view-in-github",
        "colab_type": "text"
      },
      "source": [
        "<a href=\"https://colab.research.google.com/github/NM1N1S1/LinearRegression/blob/main/Quantum\" target=\"_parent\"><img src=\"https://colab.research.google.com/assets/colab-badge.svg\" alt=\"Open In Colab\"/></a>"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 2,
      "metadata": {
        "id": "9sXBWayir1QK",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "ec39352e-cc10-430b-fa0f-e07f0237b976"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Collecting qiskit\n",
            "  Downloading qiskit-2.2.2-cp39-abi3-manylinux2014_x86_64.manylinux_2_17_x86_64.whl.metadata (12 kB)\n",
            "Collecting rustworkx>=0.15.0 (from qiskit)\n",
            "  Downloading rustworkx-0.17.1-cp39-abi3-manylinux_2_17_x86_64.manylinux2014_x86_64.whl.metadata (10 kB)\n",
            "Requirement already satisfied: numpy<3,>=1.17 in /usr/local/lib/python3.12/dist-packages (from qiskit) (2.0.2)\n",
            "Requirement already satisfied: scipy>=1.5 in /usr/local/lib/python3.12/dist-packages (from qiskit) (1.16.2)\n",
            "Requirement already satisfied: dill>=0.3 in /usr/local/lib/python3.12/dist-packages (from qiskit) (0.3.8)\n",
            "Collecting stevedore>=3.0.0 (from qiskit)\n",
            "  Downloading stevedore-5.5.0-py3-none-any.whl.metadata (2.2 kB)\n",
            "Requirement already satisfied: typing-extensions in /usr/local/lib/python3.12/dist-packages (from qiskit) (4.15.0)\n",
            "Downloading qiskit-2.2.2-cp39-abi3-manylinux2014_x86_64.manylinux_2_17_x86_64.whl (8.0 MB)\n",
            "\u001b[2K   \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m8.0/8.0 MB\u001b[0m \u001b[31m62.9 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\n",
            "\u001b[?25hDownloading rustworkx-0.17.1-cp39-abi3-manylinux_2_17_x86_64.manylinux2014_x86_64.whl (2.2 MB)\n",
            "\u001b[2K   \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m2.2/2.2 MB\u001b[0m \u001b[31m80.7 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\n",
            "\u001b[?25hDownloading stevedore-5.5.0-py3-none-any.whl (49 kB)\n",
            "\u001b[2K   \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m49.5/49.5 kB\u001b[0m \u001b[31m3.6 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\n",
            "\u001b[?25hInstalling collected packages: stevedore, rustworkx, qiskit\n",
            "Successfully installed qiskit-2.2.2 rustworkx-0.17.1 stevedore-5.5.0\n"
          ]
        }
      ],
      "source": [
        "!pip install qiskit\n"
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "from qiskit import QuantumCircuit\n",
        "print(\"Qiskit imported successfully!\")\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "7q9BPeItXJWs",
        "outputId": "b4fbb246-1d59-4f03-f945-d09fffe7a2ab"
      },
      "execution_count": 3,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Qiskit imported successfully!\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "from qiskit import QuantumCircuit\n",
        "\n",
        "# 3 qubits + 2 classical bits\n",
        "# Q0: Alice's qubit to teleport\n",
        "# Q1: Alice's half of EPR pair\n",
        "# Q2: Bob's qubit (receiving teleported state)\n",
        "# C0, C1: Classical bits for teleportation info\n",
        "qc = QuantumCircuit(3, 2)\n",
        "\n",
        "# Step 1: Prepare an arbitrary state to teleport (example: |+>)\n",
        "qc.h(0)\n",
        "\n",
        "# Step 2: Create EPR pair between qubits 1 and 2\n",
        "qc.h(1)\n",
        "qc.cx(1, 2)\n",
        "\n",
        "# Step 3: Alice performs Bell measurement on qubits 0 and 1\n",
        "qc.cx(0, 1)\n",
        "qc.h(0)\n",
        "\n",
        "# Step 4: Measure Alice's qubits into classical bits\n",
        "qc.measure([0,1],[0,1])\n",
        "\n",
        "# Step 5: Bob applies conditional operations (X and Z) based on Alice's measurement\n",
        "qc.cx(1, 2)  # X gate if classical bit 1 = 1\n",
        "qc.cz(0, 2)  # Z gate if classical bit 0 = 1\n",
        "\n",
        "# Draw circuit in text mode (works without matplotlib)\n",
        "print(qc.draw('text'))"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "8UddlEjbXQ3e",
        "outputId": "b0edd3c9-7d5c-4646-be73-2e5c5f9778a1"
      },
      "execution_count": 4,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "     ┌───┐          ┌───┐┌─┐        \n",
            "q_0: ┤ H ├───────■──┤ H ├┤M├──────■─\n",
            "     ├───┤     ┌─┴─┐└┬─┬┘└╥┘      │ \n",
            "q_1: ┤ H ├──■──┤ X ├─┤M├──╫───■───┼─\n",
            "     └───┘┌─┴─┐└───┘ └╥┘  ║ ┌─┴─┐ │ \n",
            "q_2: ─────┤ X ├───────╫───╫─┤ X ├─■─\n",
            "          └───┘       ║   ║ └───┘   \n",
            "c: 2/═════════════════╩═══╩═════════\n",
            "                      1   0         \n"
          ]
        }
      ]
    }
  ]
}